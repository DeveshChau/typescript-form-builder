(()=>{"use strict";var n={365:(n,e,r)=>{r.d(e,{A:()=>d});var t=r(354),o=r.n(t),a=r(314),i=r.n(a)()(o());i.push([n.id,"body {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    text-align: center;\n    padding: 20px;\n    color: #333;\n}\n.question {\nmargin-bottom: 15px;\n}\n.add-button {\nbackground-color: #007bff;\ncolor: white;\npadding: 10px;\nborder: none;\nborder-radius: 5px;\ncursor: pointer;\n}\n.add-button:hover {\nbackground-color: #0056b3;\n}\n.preview-button {\n    background-color: #28a745;\n    color: white;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n.preview-button:hover {\n    background-color: #18672b;\n}\n.preview-submit-button {\n    background-color: #28a745;\n    color: white;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n.preview-submit-button:hover {\n    background-color: #18672b;\n}\n.remove-btn {\n    background-color: #d45433;\n    color: white;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    width: fit-content;\n}\n.remove-btn:hover {\n    background-color: #a74128\n}\n.form-div {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    width: 300px;\n    margin: 10px;\n    padding: 10px;\n    border: 1px solid #f3f3f3;\n    border-radius: 8px;\n    background-color: #ddd;\n}\ninput {\n    background-color: #fcfeff; \n    padding: 10px; \n    border: none; \n    border-radius: 5px; \n    font-size: 16px; \n    outline: none; \n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); \n}\ninput:focus {\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2); \n    background-color: #ffffff; \n}\n.mainContainer {\n    display: flex;\n    margin-top: 10px;\n}\n.form-container {\n    flex: 1;\n}\n.preview-container {\n    flex: 1;\n    display: none;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,8BAA8B;IAC9B,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,WAAW;AACf;AACA;AACA,mBAAmB;AACnB;AACA;AACA,yBAAyB;AACzB,YAAY;AACZ,aAAa;AACb,YAAY;AACZ,kBAAkB;AAClB,eAAe;AACf;AACA;AACA,yBAAyB;AACzB;AACA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,eAAe;AACnB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,eAAe;AACnB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,kBAAkB;AACtB;AACA;IACI;AACJ;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,kBAAkB;IAClB,sBAAsB;AAC1B;AACA;IACI,yBAAyB;IACzB,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,0CAA0C;AAC9C;AACA;IACI,0CAA0C;IAC1C,yBAAyB;AAC7B;AACA;IACI,aAAa;IACb,gBAAgB;AACpB;AACA;IACI,OAAO;AACX;AACA;IACI,OAAO;IACP,aAAa;AACjB",sourcesContent:["body {\r\n    font-family: Arial, sans-serif;\r\n    background-color: #f4f4f4;\r\n    text-align: center;\r\n    padding: 20px;\r\n    color: #333;\r\n}\r\n.question {\r\nmargin-bottom: 15px;\r\n}\r\n.add-button {\r\nbackground-color: #007bff;\r\ncolor: white;\r\npadding: 10px;\r\nborder: none;\r\nborder-radius: 5px;\r\ncursor: pointer;\r\n}\r\n.add-button:hover {\r\nbackground-color: #0056b3;\r\n}\r\n.preview-button {\r\n    background-color: #28a745;\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n}\r\n.preview-button:hover {\r\n    background-color: #18672b;\r\n}\r\n.preview-submit-button {\r\n    background-color: #28a745;\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n}\r\n.preview-submit-button:hover {\r\n    background-color: #18672b;\r\n}\r\n.remove-btn {\r\n    background-color: #d45433;\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    width: fit-content;\r\n}\r\n.remove-btn:hover {\r\n    background-color: #a74128\r\n}\r\n.form-div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    width: 300px;\r\n    margin: 10px;\r\n    padding: 10px;\r\n    border: 1px solid #f3f3f3;\r\n    border-radius: 8px;\r\n    background-color: #ddd;\r\n}\r\ninput {\r\n    background-color: #fcfeff; \r\n    padding: 10px; \r\n    border: none; \r\n    border-radius: 5px; \r\n    font-size: 16px; \r\n    outline: none; \r\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); \r\n}\r\ninput:focus {\r\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2); \r\n    background-color: #ffffff; \r\n}\r\n.mainContainer {\r\n    display: flex;\r\n    margin-top: 10px;\r\n}\r\n.form-container {\r\n    flex: 1;\r\n}\r\n.preview-container {\r\n    flex: 1;\r\n    display: none;\r\n}"],sourceRoot:""}]);const d=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);t&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),r&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=r):A[2]=r),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},354:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var a={},i=[],d=0;d<n.length;d++){var c=n[d],l=t.base?c[0]+t.base:c[0],A=a[l]||0,s="".concat(l," ").concat(A);a[l]=A+1;var u=r(s),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var f=o(p,t);t.byIndex=d,e.splice(d,0,{identifier:s,updater:f,references:1})}i.push(s)}return i}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var d=r(a[i]);e[d].references--}for(var c=t(n,o),l=0;l<a.length;l++){var A=r(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=c}}},659:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var a=e[t]={id:t,exports:{}};return n[t](a,a.exports,r),a.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.nc=void 0;var t=r(72),o=r.n(t),a=r(825),i=r.n(a),d=r(659),c=r.n(d),l=r(56),A=r.n(l),s=r(540),u=r.n(s),p=r(113),f=r.n(p),b=r(365),C={};C.styleTagTransform=f(),C.setAttributes=A(),C.insert=c().bind(null,"head"),C.domAPI=i(),C.insertStyleElement=u(),o()(b.A,C),b.A&&b.A.locals&&b.A.locals;const m=document.getElementById("selectPrebuilt"),v=document.getElementById("addInput"),y=document.getElementById("preview"),x=document.getElementById("saveInput");x.style.display="none";const g=document.getElementById("formDiv"),h=document.getElementById("previewDiv");null==v||v.addEventListener("click",(()=>{x.style.display="inline";const n=document.createElement("div");n.classList.add("form-div");const e=document.createElement("label");e.textContent="Click to Edit Label: ",e.htmlFor="input-field-"+document.body.querySelectorAll("input").length,e.style.cursor="pointer",e.addEventListener("click",(()=>{const r=document.createElement("input");r.type="text",r.value=e.textContent||"",r.style.width="auto",n.replaceChild(r,e),r.focus(),r.select(),r.addEventListener("blur",(()=>{""!==r.value.trim()&&(e.textContent=r.value),n.replaceChild(e,r)}))}));const r=document.createElement("input");r.type="text",r.id=e.htmlFor;const t=document.createElement("button");t.type="button",t.textContent="Remove",t.classList.add("remove-btn"),t.addEventListener("click",(()=>{g.removeChild(n)})),n.appendChild(e),n.appendChild(r),n.appendChild(t),g.appendChild(n)})),null==y||y.addEventListener("click",(()=>{x.style.display="inline",h.innerHTML="";const n=g.querySelectorAll("div");if(0===n.length)return void alert("No fields to preview!");const e=document.createElement("form");e.style.cssText="\n      display: flex;\n      flex-direction: column;\n      gap: 10px;\n  ",n.forEach((n=>{const r=n.cloneNode(!0);r.querySelectorAll("input").forEach((n=>{n.disabled=!0})),r.querySelectorAll("button").forEach((n=>{n.remove()})),e.appendChild(r)}));const r=document.createElement("button");r.type="button",r.textContent="submit",r.style.width="fit-content",r.style.marginLeft="10px",r.classList.add("preview-submit-button"),e.appendChild(r),h.appendChild(e),h.style.display="block"})),null==m||m.addEventListener("click",(()=>{x.style.display="inline",JSON.parse(localStorage.getItem("formObj")).forEach((n=>{const e=document.createElement("div");e.classList.add("form-div");const r=document.createElement("label");r.textContent=n.labelText,r.htmlFor=n.labelFor,r.style.cursor="pointer",r.addEventListener("click",(()=>{const n=document.createElement("input");n.type="text",n.value=r.textContent||"",n.style.width="auto",e.replaceChild(n,r),n.focus(),n.select(),n.addEventListener("blur",(()=>{""!==n.value.trim()&&(r.textContent=n.value),e.replaceChild(r,n)}))}));const t=document.createElement("input");t.type="text",t.id=r.htmlFor;const o=document.createElement("button");o.type="button",o.textContent="Remove",o.classList.add("remove-btn"),o.addEventListener("click",(()=>{g.removeChild(e)})),e.appendChild(r),e.appendChild(t),e.appendChild(o),g.appendChild(e)}))})),null==x||x.addEventListener("click",(()=>{if(0===g.querySelectorAll("div").length)return void alert("No fields to save!");let n=[];g.querySelectorAll(".form-div").forEach(((e,r)=>{const t=e.querySelector("label"),o=e.querySelector("input");if(t&&o){const e=t.textContent,r=t.getAttribute("for"),a=o.getAttribute("type"),i=o.id;e&&r&&a&&n.push({labelText:e,labelFor:r,inputType:a,inputId:i}),localStorage.setItem("formObj",JSON.stringify(n))}}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJ3RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSwrc0RBeUZyQyxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw4QkFBOEIsTUFBUSxHQUFHLFNBQVcsa3pCQUFrekIsZUFBaUIsQ0FBQyxrNERBQWs0RCxXQUFhLE1BRXR5RixTLFVDMUZBRCxFQUFPRSxRQUFVLFNBQVVDLEdBQ3pCLElBQUlDLEVBQU8sR0E0RVgsT0F6RUFBLEVBQUtDLFNBQVcsV0FDZCxPQUFPQyxLQUFLQyxLQUFJLFNBQVVDLEdBQ3hCLElBQUlDLEVBQVUsR0FDVkMsT0FBK0IsSUFBWkYsRUFBSyxHQW9CNUIsT0FuQklBLEVBQUssS0FDUEMsR0FBVyxjQUFjRSxPQUFPSCxFQUFLLEdBQUksUUFFdkNBLEVBQUssS0FDUEMsR0FBVyxVQUFVRSxPQUFPSCxFQUFLLEdBQUksT0FFbkNFLElBQ0ZELEdBQVcsU0FBU0UsT0FBT0gsRUFBSyxHQUFHSSxPQUFTLEVBQUksSUFBSUQsT0FBT0gsRUFBSyxJQUFNLEdBQUksT0FFNUVDLEdBQVdOLEVBQXVCSyxHQUM5QkUsSUFDRkQsR0FBVyxLQUVURCxFQUFLLEtBQ1BDLEdBQVcsS0FFVEQsRUFBSyxLQUNQQyxHQUFXLEtBRU5BLENBQ1QsSUFBR0ksS0FBSyxHQUNWLEVBR0FULEVBQUtVLEVBQUksU0FBV0MsRUFBU0MsRUFBT0MsRUFBUUMsRUFBVUMsR0FDN0IsaUJBQVpKLElBQ1RBLEVBQVUsQ0FBQyxDQUFDLEtBQU1BLE9BQVNLLEtBRTdCLElBQUlDLEVBQXlCLENBQUMsRUFDOUIsR0FBSUosRUFDRixJQUFLLElBQUlLLEVBQUksRUFBR0EsRUFBSWhCLEtBQUtNLE9BQVFVLElBQUssQ0FDcEMsSUFBSXJCLEVBQUtLLEtBQUtnQixHQUFHLEdBQ1AsTUFBTnJCLElBQ0ZvQixFQUF1QnBCLElBQU0sRUFFakMsQ0FFRixJQUFLLElBQUlzQixFQUFLLEVBQUdBLEVBQUtSLEVBQVFILE9BQVFXLElBQU0sQ0FDMUMsSUFBSWYsRUFBTyxHQUFHRyxPQUFPSSxFQUFRUSxJQUN6Qk4sR0FBVUksRUFBdUJiLEVBQUssV0FHckIsSUFBVlcsU0FDYyxJQUFaWCxFQUFLLEtBR2RBLEVBQUssR0FBSyxTQUFTRyxPQUFPSCxFQUFLLEdBQUdJLE9BQVMsRUFBSSxJQUFJRCxPQUFPSCxFQUFLLElBQU0sR0FBSSxNQUFNRyxPQUFPSCxFQUFLLEdBQUksTUFGL0ZBLEVBQUssR0FBS1csR0FNVkgsSUFDR1IsRUFBSyxJQUdSQSxFQUFLLEdBQUssVUFBVUcsT0FBT0gsRUFBSyxHQUFJLE1BQU1HLE9BQU9ILEVBQUssR0FBSSxLQUMxREEsRUFBSyxHQUFLUSxHQUhWUixFQUFLLEdBQUtRLEdBTVZFLElBQ0dWLEVBQUssSUFHUkEsRUFBSyxHQUFLLGNBQWNHLE9BQU9ILEVBQUssR0FBSSxPQUFPRyxPQUFPSCxFQUFLLEdBQUksS0FDL0RBLEVBQUssR0FBS1UsR0FIVlYsRUFBSyxHQUFLLEdBQUdHLE9BQU9PLElBTXhCZCxFQUFLTCxLQUFLUyxHQUNaLENBQ0YsRUFDT0osQ0FDVCxDLFVDbEZBSixFQUFPRSxRQUFVLFNBQVVNLEdBQ3pCLElBQUlDLEVBQVVELEVBQUssR0FDZmdCLEVBQWFoQixFQUFLLEdBQ3RCLElBQUtnQixFQUNILE9BQU9mLEVBRVQsR0FBb0IsbUJBQVRnQixLQUFxQixDQUM5QixJQUFJQyxFQUFTRCxLQUFLRSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVOLE1BQ3pETyxFQUFPLCtEQUErRHBCLE9BQU9lLEdBQzdFTSxFQUFnQixPQUFPckIsT0FBT29CLEVBQU0sT0FDeEMsTUFBTyxDQUFDdEIsR0FBU0UsT0FBTyxDQUFDcUIsSUFBZ0JuQixLQUFLLEtBQ2hELENBQ0EsTUFBTyxDQUFDSixHQUFTSSxLQUFLLEtBQ3hCLEMsU0NiQSxJQUFJb0IsRUFBYyxHQUNsQixTQUFTQyxFQUFxQkMsR0FFNUIsSUFEQSxJQUFJQyxHQUFVLEVBQ0x0QixFQUFJLEVBQUdBLEVBQUltQixFQUFZckIsT0FBUUUsSUFDdEMsR0FBSW1CLEVBQVluQixHQUFHcUIsYUFBZUEsRUFBWSxDQUM1Q0MsRUFBU3RCLEVBQ1QsS0FDRixDQUVGLE9BQU9zQixDQUNULENBQ0EsU0FBU0MsRUFBYWpDLEVBQU1rQyxHQUcxQixJQUZBLElBQUlDLEVBQWEsQ0FBQyxFQUNkQyxFQUFjLEdBQ1QxQixFQUFJLEVBQUdBLEVBQUlWLEVBQUtRLE9BQVFFLElBQUssQ0FDcEMsSUFBSU4sRUFBT0osRUFBS1UsR0FDWmIsRUFBS3FDLEVBQVFHLEtBQU9qQyxFQUFLLEdBQUs4QixFQUFRRyxLQUFPakMsRUFBSyxHQUNsRGtDLEVBQVFILEVBQVd0QyxJQUFPLEVBQzFCa0MsRUFBYSxHQUFHeEIsT0FBT1YsRUFBSSxLQUFLVSxPQUFPK0IsR0FDM0NILEVBQVd0QyxHQUFNeUMsRUFBUSxFQUN6QixJQUFJQyxFQUFvQlQsRUFBcUJDLEdBQ3pDUyxFQUFNLENBQ1JDLElBQUtyQyxFQUFLLEdBQ1ZRLE1BQU9SLEVBQUssR0FDWnNDLFVBQVd0QyxFQUFLLEdBQ2hCVSxTQUFVVixFQUFLLEdBQ2ZXLE1BQU9YLEVBQUssSUFFZCxJQUEyQixJQUF2Qm1DLEVBQ0ZWLEVBQVlVLEdBQW1CSSxhQUMvQmQsRUFBWVUsR0FBbUJLLFFBQVFKLE9BQ2xDLENBQ0wsSUFBSUksRUFBVUMsRUFBZ0JMLEVBQUtOLEdBQ25DQSxFQUFRWSxRQUFVcEMsRUFDbEJtQixFQUFZa0IsT0FBT3JDLEVBQUcsRUFBRyxDQUN2QnFCLFdBQVlBLEVBQ1phLFFBQVNBLEVBQ1RELFdBQVksR0FFaEIsQ0FDQVAsRUFBWXpDLEtBQUtvQyxFQUNuQixDQUNBLE9BQU9LLENBQ1QsQ0FDQSxTQUFTUyxFQUFnQkwsRUFBS04sR0FDNUIsSUFBSWMsRUFBTWQsRUFBUWUsT0FBT2YsR0FZekIsT0FYQWMsRUFBSUUsT0FBT1YsR0FDRyxTQUFpQlcsR0FDN0IsR0FBSUEsRUFBUSxDQUNWLEdBQUlBLEVBQU9WLE1BQVFELEVBQUlDLEtBQU9VLEVBQU92QyxRQUFVNEIsRUFBSTVCLE9BQVN1QyxFQUFPVCxZQUFjRixFQUFJRSxXQUFhUyxFQUFPckMsV0FBYTBCLEVBQUkxQixVQUFZcUMsRUFBT3BDLFFBQVV5QixFQUFJekIsTUFDekosT0FFRmlDLEVBQUlFLE9BQU9WLEVBQU1XLEVBQ25CLE1BQ0VILEVBQUlJLFFBRVIsQ0FFRixDQUNBeEQsRUFBT0UsUUFBVSxTQUFVRSxFQUFNa0MsR0FHL0IsSUFBSW1CLEVBQWtCcEIsRUFEdEJqQyxFQUFPQSxHQUFRLEdBRGZrQyxFQUFVQSxHQUFXLENBQUMsR0FHdEIsT0FBTyxTQUFnQm9CLEdBQ3JCQSxFQUFVQSxHQUFXLEdBQ3JCLElBQUssSUFBSTVDLEVBQUksRUFBR0EsRUFBSTJDLEVBQWdCN0MsT0FBUUUsSUFBSyxDQUMvQyxJQUNJNkMsRUFBUXpCLEVBREt1QixFQUFnQjNDLElBRWpDbUIsRUFBWTBCLEdBQU9aLFlBQ3JCLENBRUEsSUFEQSxJQUFJYSxFQUFxQnZCLEVBQWFxQixFQUFTcEIsR0FDdEN1QixFQUFLLEVBQUdBLEVBQUtKLEVBQWdCN0MsT0FBUWlELElBQU0sQ0FDbEQsSUFDSUMsRUFBUzVCLEVBREt1QixFQUFnQkksSUFFSyxJQUFuQzVCLEVBQVk2QixHQUFRZixhQUN0QmQsRUFBWTZCLEdBQVFkLFVBQ3BCZixFQUFZa0IsT0FBT1csRUFBUSxHQUUvQixDQUNBTCxFQUFrQkcsQ0FDcEIsQ0FDRixDLFVDakZBLElBQUlHLEVBQU8sQ0FBQyxFQStCWi9ELEVBQU9FLFFBUFAsU0FBMEI4RCxFQUFRQyxHQUNoQyxJQUFJQyxFQXRCTixTQUFtQkEsR0FDakIsUUFBNEIsSUFBakJILEVBQUtHLEdBQXlCLENBQ3ZDLElBQUlDLEVBQWNDLFNBQVNDLGNBQWNILEdBR3pDLEdBQUlJLE9BQU9DLG1CQUFxQkosYUFBdUJHLE9BQU9DLGtCQUM1RCxJQUdFSixFQUFjQSxFQUFZSyxnQkFBZ0JDLElBQzVDLENBQUUsTUFBT0MsR0FFUFAsRUFBYyxJQUNoQixDQUVGSixFQUFLRyxHQUFVQyxDQUNqQixDQUNBLE9BQU9KLEVBQUtHLEVBQ2QsQ0FJZVMsQ0FBVVgsR0FDdkIsSUFBS0UsRUFDSCxNQUFNLElBQUlVLE1BQU0sMkdBRWxCVixFQUFPVyxZQUFZWixFQUNyQixDLFVDdkJBakUsRUFBT0UsUUFOUCxTQUE0Qm9DLEdBQzFCLElBQUl3QyxFQUFVVixTQUFTVyxjQUFjLFNBR3JDLE9BRkF6QyxFQUFRMEMsY0FBY0YsRUFBU3hDLEVBQVEyQyxZQUN2QzNDLEVBQVEwQixPQUFPYyxFQUFTeEMsRUFBUUEsU0FDekJ3QyxDQUNULEMsZUNDQTlFLEVBQU9FLFFBTlAsU0FBd0NnRixHQUN0QyxJQUFJQyxFQUFtRCxLQUNuREEsR0FDRkQsRUFBYUUsYUFBYSxRQUFTRCxFQUV2QyxDLFVDb0RBbkYsRUFBT0UsUUFqQlAsU0FBZ0JvQyxHQUNkLEdBQXdCLG9CQUFiOEIsU0FDVCxNQUFPLENBQ0xkLE9BQVEsV0FBbUIsRUFDM0JFLE9BQVEsV0FBbUIsR0FHL0IsSUFBSTBCLEVBQWU1QyxFQUFRK0MsbUJBQW1CL0MsR0FDOUMsTUFBTyxDQUNMZ0IsT0FBUSxTQUFnQlYsSUFqRDVCLFNBQWVzQyxFQUFjNUMsRUFBU00sR0FDcEMsSUFBSUMsRUFBTSxHQUNORCxFQUFJMUIsV0FDTjJCLEdBQU8sY0FBY2xDLE9BQU9pQyxFQUFJMUIsU0FBVSxRQUV4QzBCLEVBQUk1QixRQUNONkIsR0FBTyxVQUFVbEMsT0FBT2lDLEVBQUk1QixNQUFPLE9BRXJDLElBQUlOLE9BQWlDLElBQWRrQyxFQUFJekIsTUFDdkJULElBQ0ZtQyxHQUFPLFNBQVNsQyxPQUFPaUMsRUFBSXpCLE1BQU1QLE9BQVMsRUFBSSxJQUFJRCxPQUFPaUMsRUFBSXpCLE9BQVMsR0FBSSxPQUU1RTBCLEdBQU9ELEVBQUlDLElBQ1BuQyxJQUNGbUMsR0FBTyxLQUVMRCxFQUFJNUIsUUFDTjZCLEdBQU8sS0FFTEQsRUFBSTFCLFdBQ04yQixHQUFPLEtBRVQsSUFBSUMsRUFBWUYsRUFBSUUsVUFDaEJBLEdBQTZCLG9CQUFUckIsT0FDdEJvQixHQUFPLHVEQUF1RGxDLE9BQU9jLEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVWdCLE1BQWUsUUFLdElSLEVBQVFnRCxrQkFBa0J6QyxFQUFLcUMsRUFBYzVDLEVBQVFBLFFBQ3ZELENBb0JNaUQsQ0FBTUwsRUFBYzVDLEVBQVNNLEVBQy9CLEVBQ0FZLE9BQVEsWUFyQlosU0FBNEIwQixHQUUxQixHQUFnQyxPQUE1QkEsRUFBYU0sV0FDZixPQUFPLEVBRVROLEVBQWFNLFdBQVdDLFlBQVlQLEVBQ3RDLENBZ0JNUSxDQUFtQlIsRUFDckIsRUFFSixDLFVDOUNBbEYsRUFBT0UsUUFWUCxTQUEyQjJDLEVBQUtxQyxHQUM5QixHQUFJQSxFQUFhUyxXQUNmVCxFQUFhUyxXQUFXQyxRQUFVL0MsTUFDN0IsQ0FDTCxLQUFPcUMsRUFBYVcsWUFDbEJYLEVBQWFPLFlBQVlQLEVBQWFXLFlBRXhDWCxFQUFhTCxZQUFZVCxTQUFTMEIsZUFBZWpELEdBQ25ELENBQ0YsQyxHQ1hJa0QsRUFBMkIsQ0FBQyxFQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCN0UsSUFBakI4RSxFQUNILE9BQU9BLEVBQWFoRyxRQUdyQixJQUFJRixFQUFTK0YsRUFBeUJFLEdBQVksQ0FDakRoRyxHQUFJZ0csRUFFSi9GLFFBQVMsQ0FBQyxHQU9YLE9BSEFpRyxFQUFvQkYsR0FBVWpHLEVBQVFBLEVBQU9FLFFBQVM4RixHQUcvQ2hHLEVBQU9FLE9BQ2YsQ0NyQkE4RixFQUFvQkksRUFBS3BHLElBQ3hCLElBQUlxRyxFQUFTckcsR0FBVUEsRUFBT3NHLFdBQzdCLElBQU90RyxFQUFpQixRQUN4QixJQUFNLEVBRVAsT0FEQWdHLEVBQW9CTyxFQUFFRixFQUFRLENBQUVHLEVBQUdILElBQzVCQSxDQUFNLEVDTGRMLEVBQW9CTyxFQUFJLENBQUNyRyxFQUFTdUcsS0FDakMsSUFBSSxJQUFJQyxLQUFPRCxFQUNYVCxFQUFvQlcsRUFBRUYsRUFBWUMsS0FBU1YsRUFBb0JXLEVBQUV6RyxFQUFTd0csSUFDNUVFLE9BQU9DLGVBQWUzRyxFQUFTd0csRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRWLEVBQW9CVyxFQUFJLENBQUMvRCxFQUFLb0UsSUFBVUosT0FBT0ssVUFBVUMsZUFBZUMsS0FBS3ZFLEVBQUtvRSxHQ0FsRmhCLEVBQW9Cb0IsUUFBS2hHLEUsdUhDV3JCa0IsRUFBVSxDQUFDLEVBRWZBLEVBQVFnRCxrQkFBb0IsSUFDNUJoRCxFQUFRMEMsY0FBZ0IsSUFDeEIxQyxFQUFRMEIsT0FBUyxTQUFjLEtBQU0sUUFDckMxQixFQUFRZSxPQUFTLElBQ2pCZixFQUFRK0MsbUJBQXFCLElBRWhCLElBQUksSUFBUy9DLEdBS0osS0FBVyxJQUFRK0UsUUFBUyxJQUFRQSxPQUFuRCxNQ2pCREMsRUFBaUJsRCxTQUFTbUQsZUFBZSxrQkFDekNDLEVBQWlCcEQsU0FBU21ELGVBQWUsWUFDekNFLEVBQWdCckQsU0FBU21ELGVBQWUsV0FDeENHLEVBQVl0RCxTQUFTbUQsZUFBZSxhQUMxQ0csRUFBVXpELE1BQU0wRCxRQUFVLE9BQzFCLE1BQU1DLEVBQTZCeEQsU0FBU21ELGVBQWUsV0FDckRNLEVBQWdDekQsU0FBU21ELGVBQWUsY0FxQjlEQyxTQUFBQSxFQUFnQk0saUJBQWlCLFNBQVMsS0FDeENKLEVBQVV6RCxNQUFNMEQsUUFBVSxTQUV4QixNQUFNSSxFQUFNM0QsU0FBU1csY0FBYyxPQUNuQ2dELEVBQUlDLFVBQVVDLElBQUksWUFHbEIsTUFBTUMsRUFBUTlELFNBQVNXLGNBQWMsU0FDckNtRCxFQUFNQyxZQUFjLHdCQUNwQkQsRUFBTUUsUUFBVSxlQUFpQmhFLFNBQVNpRSxLQUFLQyxpQkFBaUIsU0FBUzFILE9BQ3pFc0gsRUFBTWpFLE1BQU1zRSxPQUFTLFVBR3JCTCxFQUFNSixpQkFBaUIsU0FBUyxLQUU1QixNQUFNVSxFQUFZcEUsU0FBU1csY0FBYyxTQUN6Q3lELEVBQVVDLEtBQU8sT0FDakJELEVBQVVFLE1BQVFSLEVBQU1DLGFBQWUsR0FDdkNLLEVBQVV2RSxNQUFNMEUsTUFBUSxPQUd4QlosRUFBSWEsYUFBYUosRUFBV04sR0FHNUJNLEVBQVVLLFFBQ1ZMLEVBQVVNLFNBU1ZOLEVBQVVWLGlCQUFpQixRQU5QLEtBQ2UsS0FBM0JVLEVBQVVFLE1BQU1LLFNBQ2hCYixFQUFNQyxZQUFjSyxFQUFVRSxPQUVsQ1gsRUFBSWEsYUFBYVYsRUFBT00sRUFBVSxHQUVTLElBSW5ELE1BQU1RLEVBQVE1RSxTQUFTVyxjQUFjLFNBQ3JDaUUsRUFBTVAsS0FBTyxPQUNiTyxFQUFNL0ksR0FBS2lJLEVBQU1FLFFBRWpCLE1BQU1hLEVBQU03RSxTQUFTVyxjQUFjLFVBQ25Da0UsRUFBSVIsS0FBTyxTQUNYUSxFQUFJZCxZQUFjLFNBQ2xCYyxFQUFJakIsVUFBVUMsSUFBSSxjQUVsQmdCLEVBQUluQixpQkFBaUIsU0FBUyxLQUM1QkYsRUFBY25DLFlBQVlzQyxFQUFJLElBR2hDQSxFQUFJbEQsWUFBWXFELEdBQ2hCSCxFQUFJbEQsWUFBWW1FLEdBQ2hCakIsRUFBSWxELFlBQVlvRSxHQUNoQnJCLEVBQWMvQyxZQUFZa0QsRUFBSSxJQUdsQ04sU0FBQUEsRUFBZUssaUJBQWlCLFNBQVMsS0FDdkNKLEVBQVV6RCxNQUFNMEQsUUFBVSxTQUUxQkUsRUFBaUJxQixVQUFZLEdBRzdCLE1BQU1DLEVBQVV2QixFQUFjVSxpQkFBaUIsT0FDL0MsR0FBdUIsSUFBbkJhLEVBQVF2SSxPQUVSLFlBREF3SSxNQUFNLHlCQUtWLE1BQU1DLEVBQU9qRixTQUFTVyxjQUFjLFFBQ3BDc0UsRUFBS3BGLE1BQU0yQixRQUFVLDhFQU1yQnVELEVBQVFHLFNBQVN2QixJQUNiLE1BQU13QixFQUFZeEIsRUFBSXlCLFdBQVUsR0FDaENELEVBQVVqQixpQkFBaUIsU0FBU2dCLFNBQVNOLElBQ3pDQSxFQUFNUyxVQUFXLENBQUksSUFFekJGLEVBQVVqQixpQkFBaUIsVUFBVWdCLFNBQVNJLElBQzFDQSxFQUFPbEcsUUFBUSxJQUVuQjZGLEVBQUt4RSxZQUFZMEUsRUFBVSxJQUUvQixNQUFNTixFQUFNN0UsU0FBU1csY0FBYyxVQUNuQ2tFLEVBQUlSLEtBQU8sU0FDWFEsRUFBSWQsWUFBYyxTQUNsQmMsRUFBSWhGLE1BQU0wRSxNQUFRLGNBQ2xCTSxFQUFJaEYsTUFBTTBGLFdBQWEsT0FDdkJWLEVBQUlqQixVQUFVQyxJQUFJLHlCQUtsQm9CLEVBQUt4RSxZQUFZb0UsR0FDakJwQixFQUFpQmhELFlBQVl3RSxHQUM3QnhCLEVBQWlCNUQsTUFBTTBELFFBQVUsT0FBTyxJQUcxQ0wsU0FBQUEsRUFBZ0JRLGlCQUFpQixTQUFTLEtBQ3hDSixFQUFVekQsTUFBTTBELFFBQVUsU0FDRzlGLEtBQUsrSCxNQUFNQyxhQUFhQyxRQUFRLFlBR3JEUixTQUFRMUcsSUFDZCxNQUFNbUYsRUFBTTNELFNBQVNXLGNBQWMsT0FDbkNnRCxFQUFJQyxVQUFVQyxJQUFJLFlBQ2xCLE1BQU1DLEVBQVE5RCxTQUFTVyxjQUFjLFNBQ3JDbUQsRUFBTUMsWUFBY3ZGLEVBQUltSCxVQUN4QjdCLEVBQU1FLFFBQVV4RixFQUFJb0gsU0FDcEI5QixFQUFNakUsTUFBTXNFLE9BQVMsVUFHckJMLEVBQU1KLGlCQUFpQixTQUFTLEtBRTlCLE1BQU1VLEVBQVlwRSxTQUFTVyxjQUFjLFNBQ3pDeUQsRUFBVUMsS0FBTyxPQUNqQkQsRUFBVUUsTUFBUVIsRUFBTUMsYUFBZSxHQUN2Q0ssRUFBVXZFLE1BQU0wRSxNQUFRLE9BR3hCWixFQUFJYSxhQUFhSixFQUFXTixHQUc1Qk0sRUFBVUssUUFDVkwsRUFBVU0sU0FTVk4sRUFBVVYsaUJBQWlCLFFBTlAsS0FDYSxLQUEzQlUsRUFBVUUsTUFBTUssU0FDaEJiLEVBQU1DLFlBQWNLLEVBQVVFLE9BRWxDWCxFQUFJYSxhQUFhVixFQUFPTSxFQUFVLEdBRVcsSUFJakQsTUFBTVEsRUFBUTVFLFNBQVNXLGNBQWMsU0FDckNpRSxFQUFNUCxLQUFPLE9BQ2JPLEVBQU0vSSxHQUFLaUksRUFBTUUsUUFFakIsTUFBTWEsRUFBTTdFLFNBQVNXLGNBQWMsVUFDbkNrRSxFQUFJUixLQUFPLFNBQ1hRLEVBQUlkLFlBQWMsU0FDbEJjLEVBQUlqQixVQUFVQyxJQUFJLGNBRWxCZ0IsRUFBSW5CLGlCQUFpQixTQUFTLEtBQzVCRixFQUFjbkMsWUFBWXNDLEVBQUksSUFHaENBLEVBQUlsRCxZQUFZcUQsR0FDaEJILEVBQUlsRCxZQUFZbUUsR0FDaEJqQixFQUFJbEQsWUFBWW9FLEdBQ2hCckIsRUFBYy9DLFlBQVlrRCxFQUFJLEdBRTlCLElBR0pMLFNBQUFBLEVBQVdJLGlCQUFpQixTQUFTLEtBRW5DLEdBQXVCLElBRFBGLEVBQWNVLGlCQUFpQixPQUNuQzFILE9BRVIsWUFEQXdJLE1BQU0sc0JBR1YsSUFBSWEsRUFBMEIsR0FDWnJDLEVBQWNVLGlCQUFpQixhQUd2Q2dCLFNBQVEsQ0FBQ1ksRUFBVXZHLEtBRTNCLE1BQU11RSxFQUFRZ0MsRUFBUzdGLGNBQWMsU0FDL0IyRSxFQUFRa0IsRUFBUzdGLGNBQWMsU0FFckMsR0FBSTZELEdBQVNjLEVBQU8sQ0FFbEIsTUFBTWUsRUFBWTdCLEVBQU1DLFlBQ2xCNkIsRUFBVzlCLEVBQU1pQyxhQUFhLE9BQzlCQyxFQUFZcEIsRUFBTW1CLGFBQWEsUUFDL0JFLEVBQVVyQixFQUFNL0ksR0FDbEI4SixHQUFhQyxHQUFZSSxHQUMzQkgsRUFBV2xLLEtBQUssQ0FBQ2dLLFlBQVdDLFdBQVVJLFlBQVdDLFlBRW5EUixhQUFhUyxRQUFRLFVBQVd6SSxLQUFLQyxVQUFVbUksR0FDakQsSUFDQSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHMtc2V0dXAvLi9zcmMvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly90cy1zZXR1cC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdHMtc2V0dXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90cy1zZXR1cC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90cy1zZXR1cC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdHMtc2V0dXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdHMtc2V0dXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdHMtc2V0dXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90cy1zZXR1cC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RzLXNldHVwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RzLXNldHVwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RzLXNldHVwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90cy1zZXR1cC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RzLXNldHVwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90cy1zZXR1cC8uL3NyYy9zdHlsZXMuY3NzPzQ0YjIiLCJ3ZWJwYWNrOi8vdHMtc2V0dXAvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGJvZHkge1xyXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICBjb2xvcjogIzMzMztcclxufVxyXG4ucXVlc3Rpb24ge1xyXG5tYXJnaW4tYm90dG9tOiAxNXB4O1xyXG59XHJcbi5hZGQtYnV0dG9uIHtcclxuYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcclxuY29sb3I6IHdoaXRlO1xyXG5wYWRkaW5nOiAxMHB4O1xyXG5ib3JkZXI6IG5vbmU7XHJcbmJvcmRlci1yYWRpdXM6IDVweDtcclxuY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcbi5hZGQtYnV0dG9uOmhvdmVyIHtcclxuYmFja2dyb3VuZC1jb2xvcjogIzAwNTZiMztcclxufVxyXG4ucHJldmlldy1idXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuLnByZXZpZXctYnV0dG9uOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxODY3MmI7XHJcbn1cclxuLnByZXZpZXctc3VibWl0LWJ1dHRvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG4ucHJldmlldy1zdWJtaXQtYnV0dG9uOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxODY3MmI7XHJcbn1cclxuLnJlbW92ZS1idG4ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Q0NTQzMztcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbn1cclxuLnJlbW92ZS1idG46aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2E3NDEyOFxyXG59XHJcbi5mb3JtLWRpdiB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGdhcDogMTBweDtcclxuICAgIHdpZHRoOiAzMDBweDtcclxuICAgIG1hcmdpbjogMTBweDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZjNmM2YzO1xyXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcclxufVxyXG5pbnB1dCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmZWZmOyBcclxuICAgIHBhZGRpbmc6IDEwcHg7IFxyXG4gICAgYm9yZGVyOiBub25lOyBcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDsgXHJcbiAgICBmb250LXNpemU6IDE2cHg7IFxyXG4gICAgb3V0bGluZTogbm9uZTsgXHJcbiAgICBib3gtc2hhZG93OiAwcHggNHB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMSk7IFxyXG59XHJcbmlucHV0OmZvY3VzIHtcclxuICAgIGJveC1zaGFkb3c6IDBweCA0cHggNnB4IHJnYmEoMCwgMCwgMCwgMC4yKTsgXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOyBcclxufVxyXG4ubWFpbkNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG4uZm9ybS1jb250YWluZXIge1xyXG4gICAgZmxleDogMTtcclxufVxyXG4ucHJldmlldy1jb250YWluZXIge1xyXG4gICAgZmxleDogMTtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksOEJBQThCO0lBQzlCLHlCQUF5QjtJQUN6QixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLFdBQVc7QUFDZjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsWUFBWTtBQUNaLGFBQWE7QUFDYixZQUFZO0FBQ1osa0JBQWtCO0FBQ2xCLGVBQWU7QUFDZjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGFBQWE7SUFDYixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGVBQWU7QUFDbkI7QUFDQTtJQUNJLHlCQUF5QjtBQUM3QjtBQUNBO0lBQ0kseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixhQUFhO0lBQ2IsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixlQUFlO0FBQ25CO0FBQ0E7SUFDSSx5QkFBeUI7QUFDN0I7QUFDQTtJQUNJLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osYUFBYTtJQUNiLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0k7QUFDSjtBQUNBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixTQUFTO0lBQ1QsWUFBWTtJQUNaLFlBQVk7SUFDWixhQUFhO0lBQ2IseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixzQkFBc0I7QUFDMUI7QUFDQTtJQUNJLHlCQUF5QjtJQUN6QixhQUFhO0lBQ2IsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsYUFBYTtJQUNiLDBDQUEwQztBQUM5QztBQUNBO0lBQ0ksMENBQTBDO0lBQzFDLHlCQUF5QjtBQUM3QjtBQUNBO0lBQ0ksYUFBYTtJQUNiLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksT0FBTztBQUNYO0FBQ0E7SUFDSSxPQUFPO0lBQ1AsYUFBYTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXHJcXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0O1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIGNvbG9yOiAjMzMzO1xcclxcbn1cXHJcXG4ucXVlc3Rpb24ge1xcclxcbm1hcmdpbi1ib3R0b206IDE1cHg7XFxyXFxufVxcclxcbi5hZGQtYnV0dG9uIHtcXHJcXG5iYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcclxcbmNvbG9yOiB3aGl0ZTtcXHJcXG5wYWRkaW5nOiAxMHB4O1xcclxcbmJvcmRlcjogbm9uZTtcXHJcXG5ib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG4uYWRkLWJ1dHRvbjpob3ZlciB7XFxyXFxuYmFja2dyb3VuZC1jb2xvcjogIzAwNTZiMztcXHJcXG59XFxyXFxuLnByZXZpZXctYnV0dG9uIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG4ucHJldmlldy1idXR0b246aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTg2NzJiO1xcclxcbn1cXHJcXG4ucHJldmlldy1zdWJtaXQtYnV0dG9uIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG4ucHJldmlldy1zdWJtaXQtYnV0dG9uOmhvdmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE4NjcyYjtcXHJcXG59XFxyXFxuLnJlbW92ZS1idG4ge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDQ1NDMzO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIHdpZHRoOiBmaXQtY29udGVudDtcXHJcXG59XFxyXFxuLnJlbW92ZS1idG46aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTc0MTI4XFxyXFxufVxcclxcbi5mb3JtLWRpdiB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogMTBweDtcXHJcXG4gICAgd2lkdGg6IDMwMHB4O1xcclxcbiAgICBtYXJnaW46IDEwcHg7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmM2YzZjM7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcXHJcXG59XFxyXFxuaW5wdXQge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmZWZmOyBcXHJcXG4gICAgcGFkZGluZzogMTBweDsgXFxyXFxuICAgIGJvcmRlcjogbm9uZTsgXFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDsgXFxyXFxuICAgIGZvbnQtc2l6ZTogMTZweDsgXFxyXFxuICAgIG91dGxpbmU6IG5vbmU7IFxcclxcbiAgICBib3gtc2hhZG93OiAwcHggNHB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMSk7IFxcclxcbn1cXHJcXG5pbnB1dDpmb2N1cyB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDBweCA0cHggNnB4IHJnYmEoMCwgMCwgMCwgMC4yKTsgXFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7IFxcclxcbn1cXHJcXG4ubWFpbkNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxyXFxufVxcclxcbi5mb3JtLWNvbnRhaW5lciB7XFxyXFxuICAgIGZsZXg6IDE7XFxyXFxufVxcclxcbi5wcmV2aWV3LWNvbnRhaW5lciB7XFxyXFxuICAgIGZsZXg6IDE7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL3N0eWxlcy5jc3NcIjtcclxuaW50ZXJmYWNlIEZvcm1GaWVsZCB7XHJcbiAgbGFiZWxUZXh0OiBzdHJpbmc7XHJcbiAgbGFiZWxGb3I6IHN0cmluZztcclxuICBpbnB1dFR5cGU6IHN0cmluZztcclxuICBpbnB1dElkOiBzdHJpbmc7XHJcbn1cclxuY29uc3Qgc2VsZWN0UHJlYnVpbHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlbGVjdFByZWJ1aWx0XCIpO1xyXG5jb25zdCBhZGRJbnB1dEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkSW5wdXRcIik7XHJcbmNvbnN0IHByZXZpZXdCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByZXZpZXdcIik7XHJcbmNvbnN0IHNhdmVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2F2ZUlucHV0XCIpICBhcyBIVE1MRWxlbWVudDtcclxuc2F2ZUlucHV0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuY29uc3QgZm9ybUNvbnRhaW5lcjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvcm1EaXZcIikgYXMgSFRNTEVsZW1lbnRcclxuY29uc3QgcHJldmlld0NvbnRhaW5lcjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByZXZpZXdEaXZcIikgYXMgSFRNTEVsZW1lbnRcclxuLy8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Zvcm1PYmonLCBKU09OLnN0cmluZ2lmeShbXHJcbi8vICAge1xyXG4vLyAgICAgbGFiZWxUZXh0OiAncTAnLFxyXG4vLyAgICAgbGFiZWxGb3I6ICdpbnB1dC1maWVsZC0wJyxcclxuLy8gICAgIGlucHV0VHlwZTogJ3RleHQnLFxyXG4vLyAgICAgaW5wdXRJZDogJ2lucHV0LWZpZWxkLTAnXHJcbi8vICAgfSxcclxuLy8gICB7XHJcbi8vICAgICBsYWJlbFRleHQ6ICdxMScsXHJcbi8vICAgICBsYWJlbEZvcjogJ2lucHV0LWZpZWxkLTEnLFxyXG4vLyAgICAgaW5wdXRUeXBlOiAndGV4dCcsXHJcbi8vICAgICBpbnB1dElkOiAnaW5wdXQtZmllbGQtMSdcclxuLy8gICB9LFxyXG4vLyAgIHtcclxuLy8gICAgIGxhYmVsVGV4dDogJ3EyJyxcclxuLy8gICAgIGxhYmVsRm9yOiAnaW5wdXQtZmllbGQtMicsXHJcbi8vICAgICBpbnB1dFR5cGU6ICd0ZXh0JyxcclxuLy8gICAgIGlucHV0SWQ6ICdpbnB1dC1maWVsZC0yJ1xyXG4vLyAgIH1cclxuLy8gXSkpXHJcbmFkZElucHV0QnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHNhdmVJbnB1dC5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSdcclxuICAgIC8vIENyZWF0ZSBhIGRpdiBlbGVtZW50XHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ2Zvcm0tZGl2Jyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgbGFiZWwgZWxlbWVudFxyXG4gICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbC50ZXh0Q29udGVudCA9IFwiQ2xpY2sgdG8gRWRpdCBMYWJlbDogXCI7XHJcbiAgICBsYWJlbC5odG1sRm9yID0gXCJpbnB1dC1maWVsZC1cIiArIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcImlucHV0XCIpLmxlbmd0aDtcclxuICAgIGxhYmVsLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xyXG5cclxuICAgIC8vIEFkZCBpbmxpbmUgZWRpdCBmdW5jdGlvbmFsaXR5XHJcbiAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIC8vIENyZWF0ZSBhbiBpbnB1dCBmaWVsZCB0byByZXBsYWNlIHRoZSBsYWJlbFxyXG4gICAgICAgIGNvbnN0IGVkaXRJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgICBlZGl0SW5wdXQudHlwZSA9IFwidGV4dFwiO1xyXG4gICAgICAgIGVkaXRJbnB1dC52YWx1ZSA9IGxhYmVsLnRleHRDb250ZW50IHx8IFwiXCI7XHJcbiAgICAgICAgZWRpdElucHV0LnN0eWxlLndpZHRoID0gXCJhdXRvXCI7XHJcblxyXG4gICAgICAgIC8vIFJlcGxhY2UgdGhlIGxhYmVsIHdpdGggdGhlIGlucHV0IGZpZWxkXHJcbiAgICAgICAgZGl2LnJlcGxhY2VDaGlsZChlZGl0SW5wdXQsIGxhYmVsKTtcclxuXHJcbiAgICAgICAgLy8gRm9jdXMgb24gdGhlIGlucHV0IGZpZWxkIGFuZCBzZWxlY3QgaXRzIHRleHRcclxuICAgICAgICBlZGl0SW5wdXQuZm9jdXMoKTtcclxuICAgICAgICBlZGl0SW5wdXQuc2VsZWN0KCk7XHJcblxyXG4gICAgICAgIC8vIFNhdmUgY2hhbmdlcyBvbiBibHVyIG9yIEVudGVyIGtleSBwcmVzc1xyXG4gICAgICAgIGNvbnN0IHNhdmVDaGFuZ2VzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZWRpdElucHV0LnZhbHVlLnRyaW0oKSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSBlZGl0SW5wdXQudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGl2LnJlcGxhY2VDaGlsZChsYWJlbCwgZWRpdElucHV0KTsgLy8gUmVwbGFjZSBpbnB1dCB3aXRoIGxhYmVsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBlZGl0SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgc2F2ZUNoYW5nZXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuIGlucHV0IGVsZW1lbnRcclxuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgaW5wdXQudHlwZSA9IFwidGV4dFwiO1xyXG4gICAgaW5wdXQuaWQgPSBsYWJlbC5odG1sRm9yO1xyXG5cclxuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIilcclxuICAgIGJ0bi50eXBlID0gXCJidXR0b25cIlxyXG4gICAgYnRuLnRleHRDb250ZW50ID0gXCJSZW1vdmVcIlxyXG4gICAgYnRuLmNsYXNzTGlzdC5hZGQoJ3JlbW92ZS1idG4nKVxyXG5cclxuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICBmb3JtQ29udGFpbmVyLnJlbW92ZUNoaWxkKGRpdilcclxuICAgIH0pXHJcbiAgICAvLyBBcHBlbmQgbGFiZWwgYW5kIGlucHV0IHRvIHRoZSBkaXZcclxuICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7XHJcbiAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG4gICAgZGl2LmFwcGVuZENoaWxkKGJ0bik7XHJcbiAgICBmb3JtQ29udGFpbmVyLmFwcGVuZENoaWxkKGRpdilcclxufSk7XHJcblxyXG5wcmV2aWV3QnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHNhdmVJbnB1dC5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSdcclxuICAvLyBDbGVhciBwcmV2aW91cyBwcmV2aWV3XHJcbiAgcHJldmlld0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xyXG5cclxuICAvLyBDb2xsZWN0IGFsbCBkeW5hbWljYWxseSBhZGRlZCBkaXZzXHJcbiAgY29uc3QgYWxsRGl2cyA9IGZvcm1Db250YWluZXIucXVlcnlTZWxlY3RvckFsbChcImRpdlwiKTtcclxuICBpZiAoYWxsRGl2cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgYWxlcnQoXCJObyBmaWVsZHMgdG8gcHJldmlldyFcIik7XHJcbiAgICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZSBhIGZvcm0gZm9yIHByZXZpZXdcclxuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XHJcbiAgZm9ybS5zdHlsZS5jc3NUZXh0ID0gYFxyXG4gICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICBnYXA6IDEwcHg7XHJcbiAgYDtcclxuXHJcbiAgYWxsRGl2cy5mb3JFYWNoKChkaXY6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IGNsb25lZERpdiA9IGRpdi5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGNsb25lZERpdi5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRcIikuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgICAgIGlucHV0LmRpc2FibGVkID0gdHJ1ZTsgLy8gRGlzYWJsZSBpbnB1dHMgZm9yIHByZXZpZXdcclxuICAgICAgfSk7XHJcbiAgICAgIGNsb25lZERpdi5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uXCIpLmZvckVhY2goKGJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgYnV0dG9uLnJlbW92ZSgpO1xyXG4gICAgICB9KTtcclxuICAgICAgZm9ybS5hcHBlbmRDaGlsZChjbG9uZWREaXYpO1xyXG4gIH0pO1xyXG4gIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXHJcbiAgYnRuLnR5cGUgPSAnYnV0dG9uJ1xyXG4gIGJ0bi50ZXh0Q29udGVudCA9ICdzdWJtaXQnXHJcbiAgYnRuLnN0eWxlLndpZHRoID0gXCJmaXQtY29udGVudFwiXHJcbiAgYnRuLnN0eWxlLm1hcmdpbkxlZnQgPSBcIjEwcHhcIlxyXG4gIGJ0bi5jbGFzc0xpc3QuYWRkKCdwcmV2aWV3LXN1Ym1pdC1idXR0b24nKVxyXG5cclxuXHJcblxyXG5cclxuICBmb3JtLmFwcGVuZENoaWxkKGJ0bilcclxuICBwcmV2aWV3Q29udGFpbmVyLmFwcGVuZENoaWxkKGZvcm0pO1xyXG4gIHByZXZpZXdDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxufSk7XHJcblxyXG5zZWxlY3RQcmVidWlsdD8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBzYXZlSW5wdXQuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUnXHJcbiAgY29uc3QgZm9ybU9iajogRm9ybUZpZWxkW10gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdmb3JtT2JqJykgYXMgc3RyaW5nKVxyXG4gIFxyXG4gIC8vIENyZWF0ZSBhIGxhYmVsIGVsZW1lbnRcclxuICBmb3JtT2JqLmZvckVhY2gob2JqID0+IHtcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgnZm9ybS1kaXYnKTtcclxuICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWwudGV4dENvbnRlbnQgPSBvYmoubGFiZWxUZXh0O1xyXG4gICAgbGFiZWwuaHRtbEZvciA9IG9iai5sYWJlbEZvcjtcclxuICAgIGxhYmVsLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xyXG4gIFxyXG4gICAgLy8gQWRkIGlubGluZSBlZGl0IGZ1bmN0aW9uYWxpdHlcclxuICAgIGxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAvLyBDcmVhdGUgYW4gaW5wdXQgZmllbGQgdG8gcmVwbGFjZSB0aGUgbGFiZWxcclxuICAgICAgY29uc3QgZWRpdElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICBlZGl0SW5wdXQudHlwZSA9IFwidGV4dFwiO1xyXG4gICAgICBlZGl0SW5wdXQudmFsdWUgPSBsYWJlbC50ZXh0Q29udGVudCB8fCBcIlwiO1xyXG4gICAgICBlZGl0SW5wdXQuc3R5bGUud2lkdGggPSBcImF1dG9cIjtcclxuICBcclxuICAgICAgLy8gUmVwbGFjZSB0aGUgbGFiZWwgd2l0aCB0aGUgaW5wdXQgZmllbGRcclxuICAgICAgZGl2LnJlcGxhY2VDaGlsZChlZGl0SW5wdXQsIGxhYmVsKTtcclxuICBcclxuICAgICAgLy8gRm9jdXMgb24gdGhlIGlucHV0IGZpZWxkIGFuZCBzZWxlY3QgaXRzIHRleHRcclxuICAgICAgZWRpdElucHV0LmZvY3VzKCk7XHJcbiAgICAgIGVkaXRJbnB1dC5zZWxlY3QoKTtcclxuICBcclxuICAgICAgLy8gU2F2ZSBjaGFuZ2VzIG9uIGJsdXIgb3IgRW50ZXIga2V5IHByZXNzXHJcbiAgICAgIGNvbnN0IHNhdmVDaGFuZ2VzID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChlZGl0SW5wdXQudmFsdWUudHJpbSgpICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGxhYmVsLnRleHRDb250ZW50ID0gZWRpdElucHV0LnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkaXYucmVwbGFjZUNoaWxkKGxhYmVsLCBlZGl0SW5wdXQpOyAvLyBSZXBsYWNlIGlucHV0IHdpdGggbGFiZWxcclxuICAgICAgfTtcclxuICAgICAgZWRpdElucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHNhdmVDaGFuZ2VzKTtcclxuICAgIH0pO1xyXG4gIFxyXG4gICAgLy8gQ3JlYXRlIGFuIGlucHV0IGVsZW1lbnRcclxuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgaW5wdXQudHlwZSA9IFwidGV4dFwiO1xyXG4gICAgaW5wdXQuaWQgPSBsYWJlbC5odG1sRm9yO1xyXG4gIFxyXG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKVxyXG4gICAgYnRuLnR5cGUgPSBcImJ1dHRvblwiXHJcbiAgICBidG4udGV4dENvbnRlbnQgPSBcIlJlbW92ZVwiXHJcbiAgICBidG4uY2xhc3NMaXN0LmFkZCgncmVtb3ZlLWJ0bicpXHJcbiAgXHJcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgZm9ybUNvbnRhaW5lci5yZW1vdmVDaGlsZChkaXYpXHJcbiAgICB9KVxyXG4gICAgLy8gQXBwZW5kIGxhYmVsIGFuZCBpbnB1dCB0byB0aGUgZGl2XHJcbiAgICBkaXYuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG4gICAgZGl2LmFwcGVuZENoaWxkKGlucHV0KTtcclxuICAgIGRpdi5hcHBlbmRDaGlsZChidG4pO1xyXG4gICAgZm9ybUNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXYpXHJcblxyXG4gIH0pXHJcbn0pO1xyXG5cclxuc2F2ZUlucHV0Py5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGNvbnN0IGFsbERpdnMgPSBmb3JtQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJkaXZcIik7XHJcbiAgaWYgKGFsbERpdnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGFsZXJ0KFwiTm8gZmllbGRzIHRvIHNhdmUhXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgfVxyXG4gIGxldCBmb3JtT2JqQXJyOiBGb3JtRmllbGRbXSA9IFtdXHJcbiAgY29uc3QgY2hpbGREaXZzID0gZm9ybUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm0tZGl2XCIpO1xyXG5cclxuICAvLyBJdGVyYXRlIG92ZXIgZWFjaCBjaGlsZCBkaXYgYW5kIGdldCBpdHMgZWxlbWVudHNcclxuICBjaGlsZERpdnMuZm9yRWFjaCgoY2hpbGREaXYsIGluZGV4KSA9PiB7XHJcbiAgICAvLyBHZXQgdGhlIGxhYmVsIGFuZCBpbnB1dCBlbGVtZW50cyB3aXRoaW4gZWFjaCBjaGlsZCBkaXZcclxuICAgIGNvbnN0IGxhYmVsID0gY2hpbGREaXYucXVlcnlTZWxlY3RvcihcImxhYmVsXCIpO1xyXG4gICAgY29uc3QgaW5wdXQgPSBjaGlsZERpdi5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7XHJcblxyXG4gICAgaWYgKGxhYmVsICYmIGlucHV0KSB7XHJcbiAgICAgIC8vIFJlYWQgdGhlIGxhYmVsIGFuZCBpbnB1dCBhdHRyaWJ1dGVzXHJcbiAgICAgIGNvbnN0IGxhYmVsVGV4dCA9IGxhYmVsLnRleHRDb250ZW50O1xyXG4gICAgICBjb25zdCBsYWJlbEZvciA9IGxhYmVsLmdldEF0dHJpYnV0ZShcImZvclwiKTtcclxuICAgICAgY29uc3QgaW5wdXRUeXBlID0gaW5wdXQuZ2V0QXR0cmlidXRlKFwidHlwZVwiKTtcclxuICAgICAgY29uc3QgaW5wdXRJZCA9IGlucHV0LmlkO1xyXG4gICAgICBpZiAobGFiZWxUZXh0ICYmIGxhYmVsRm9yICYmIGlucHV0VHlwZSl7XHJcbiAgICAgICAgZm9ybU9iakFyci5wdXNoKHtsYWJlbFRleHQsIGxhYmVsRm9yLCBpbnB1dFR5cGUsIGlucHV0SWR9KVxyXG4gICAgICB9XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmb3JtT2JqJywgSlNPTi5zdHJpbmdpZnkoZm9ybU9iakFycikpXHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwibG9jYWxzIiwic2VsZWN0UHJlYnVpbHQiLCJnZXRFbGVtZW50QnlJZCIsImFkZElucHV0QnV0dG9uIiwicHJldmlld0J1dHRvbiIsInNhdmVJbnB1dCIsImRpc3BsYXkiLCJmb3JtQ29udGFpbmVyIiwicHJldmlld0NvbnRhaW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXYiLCJjbGFzc0xpc3QiLCJhZGQiLCJsYWJlbCIsInRleHRDb250ZW50IiwiaHRtbEZvciIsImJvZHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY3Vyc29yIiwiZWRpdElucHV0IiwidHlwZSIsInZhbHVlIiwid2lkdGgiLCJyZXBsYWNlQ2hpbGQiLCJmb2N1cyIsInNlbGVjdCIsInRyaW0iLCJpbnB1dCIsImJ0biIsImlubmVySFRNTCIsImFsbERpdnMiLCJhbGVydCIsImZvcm0iLCJmb3JFYWNoIiwiY2xvbmVkRGl2IiwiY2xvbmVOb2RlIiwiZGlzYWJsZWQiLCJidXR0b24iLCJtYXJnaW5MZWZ0IiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibGFiZWxUZXh0IiwibGFiZWxGb3IiLCJmb3JtT2JqQXJyIiwiY2hpbGREaXYiLCJnZXRBdHRyaWJ1dGUiLCJpbnB1dFR5cGUiLCJpbnB1dElkIiwic2V0SXRlbSJdLCJzb3VyY2VSb290IjoiIn0=